// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int          @id @default(autoincrement())
  email     String       @unique @db.VarChar(255)
  name      String       @db.VarChar(255)
  password  String       @db.VarChar(255)
  avatarUrl String?
  phone     String       @unique @db.VarChar(15) // Limitar para 15 caracteres
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  sessions  Session[]
  appointments Appointment[]  // Relaciona o User com seus agendamentos
  evaluations Evaluation[]  // Um usuário pode ter várias avaliações

}

model Barber {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  appointments Appointment[] // Adicionado para refletir a relação oposta
}

model Evaluation {
  id        Int      @id @default(autoincrement())
  rating    Int      // Nota de 1 a 5
  comments  String?  @db.Text  // Comentário opcional
  userId    Int      // Relacionamento com o usuário
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  price      Decimal       @db.Decimal(10, 2) // Garantir duas casas decimais para preço
  appointments AppointmentService[] // Adicionado para refletir a relação oposta
}

model Appointment {
  id            Int          @id @default(autoincrement())
  date          DateTime     // Remover o campo `time` para usar DateTime completo
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  barber        Barber?       @relation(fields: [barberId], references: [id], onDelete: SetNull)
  barberId      Int?
  services      AppointmentService[]
  comments      String?      @db.Text  // Permitir comentários longos
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model AppointmentService {
  id            Int          @id @default(autoincrement())
  appointment   Appointment  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId Int
  service       Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId     Int
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
